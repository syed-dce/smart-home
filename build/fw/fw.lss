
../build/fw/fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c4  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ac  080000c4  080000c4  000080c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08000370  08000370  00008370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08000374  08000374  00008374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000004  20000000  08000378  00010000  2**0
                  ALLOC
  5 ._user_heap_stack 00000600  20000004  08000378  00010004  2**0
                  ALLOC
  6 .ARM.attributes 00000029  00000000  00000000  00008378  2**0
                  CONTENTS, READONLY
  7 .debug_abbrev 00000919  00000000  00000000  000083a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002379  00000000  00000000  00008cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b72  00000000  00000000  0000b033  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macinfo 00176d00  00000000  00000000  0000cba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011f1  00000000  00000000  001838a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 0000085c  00000000  00000000  00184a96  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000032a  00000000  00000000  001852f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000370  00000000  00000000  0018561c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000310  00000000  00000000  0018598c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00000f53  00000000  00000000  00185c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000002a  00000000  00000000  00186bef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000007e8  00000000  00000000  00186c1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c4 <__do_global_dtors_aux>:
 80000c4:	b500      	push	{lr}
 80000c6:	4b03      	ldr	r3, [pc, #12]	; (80000d4 <__do_global_dtors_aux+0x10>)
 80000c8:	781a      	ldrb	r2, [r3, #0]
 80000ca:	2a00      	cmp	r2, #0
 80000cc:	d101      	bne.n	80000d2 <__do_global_dtors_aux+0xe>
 80000ce:	3201      	adds	r2, #1
 80000d0:	701a      	strb	r2, [r3, #0]
 80000d2:	bd00      	pop	{pc}
 80000d4:	20000000 	.word	0x20000000

080000d8 <frame_dummy>:
 80000d8:	b508      	push	{r3, lr}
 80000da:	4804      	ldr	r0, [pc, #16]	; (80000ec <frame_dummy+0x14>)
 80000dc:	6803      	ldr	r3, [r0, #0]
 80000de:	2b00      	cmp	r3, #0
 80000e0:	d003      	beq.n	80000ea <frame_dummy+0x12>
 80000e2:	4b03      	ldr	r3, [pc, #12]	; (80000f0 <frame_dummy+0x18>)
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d000      	beq.n	80000ea <frame_dummy+0x12>
 80000e8:	4798      	blx	r3
 80000ea:	bd08      	pop	{r3, pc}
 80000ec:	20000000 	.word	0x20000000
 80000f0:	00000000 	.word	0x00000000

080000f4 <GPIO_Configuration>:
#define 	LED2_OFF 	GPIO_ResetBits(GPIOC, GPIO_Pin_9)


/* GPIO_Configuration */
void GPIO_Configuration(void)
{
 80000f4:	b507      	push	{r0, r1, r2, lr}
	GPIO_InitTypeDef GPIO_InitStructure;

    /* Configure LEDs (PC.8, PC.9) */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 80000f6:	23c0      	movs	r3, #192	; 0xc0
 80000f8:	009b      	lsls	r3, r3, #2
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80000fa:	466a      	mov	r2, sp
void GPIO_Configuration(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;

    /* Configure LEDs (PC.8, PC.9) */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 80000fc:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80000fe:	2301      	movs	r3, #1
 8000100:	7113      	strb	r3, [r2, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000102:	3302      	adds	r3, #2
 8000104:	7153      	strb	r3, [r2, #5]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000106:	4802      	ldr	r0, [pc, #8]	; (8000110 <GPIO_Configuration+0x1c>)
 8000108:	4669      	mov	r1, sp
 800010a:	f000 f8d9 	bl	80002c0 <GPIO_Init>
}
 800010e:	bd07      	pop	{r0, r1, r2, pc}
 8000110:	48000800 	.word	0x48000800

08000114 <RCC_Configuration>:


/* RCC_Configuration */
void RCC_Configuration(void)
{
 8000114:	b508      	push	{r3, lr}
	/* Enable USART1 for debug output */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
#endif

	/* Enable GPIOC */
	RCC_APB2PeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000116:	2080      	movs	r0, #128	; 0x80
 8000118:	0300      	lsls	r0, r0, #12
 800011a:	2101      	movs	r1, #1
 800011c:	f000 f90e 	bl	800033c <RCC_APB2PeriphClockCmd>
}
 8000120:	bd08      	pop	{r3, pc}

08000122 <delay>:


void delay(uint32_t time)
{
 8000122:	b507      	push	{r0, r1, r2, lr}
	volatile uint32_t i = time * 1000;
 8000124:	0143      	lsls	r3, r0, #5
 8000126:	1a1b      	subs	r3, r3, r0
 8000128:	009b      	lsls	r3, r3, #2
 800012a:	1818      	adds	r0, r3, r0
 800012c:	00c0      	lsls	r0, r0, #3
 800012e:	9001      	str	r0, [sp, #4]

	while (i) {
 8000130:	e002      	b.n	8000138 <delay+0x16>
		i--;
 8000132:	9b01      	ldr	r3, [sp, #4]
 8000134:	3b01      	subs	r3, #1
 8000136:	9301      	str	r3, [sp, #4]

void delay(uint32_t time)
{
	volatile uint32_t i = time * 1000;

	while (i) {
 8000138:	9b01      	ldr	r3, [sp, #4]
 800013a:	2b00      	cmp	r3, #0
 800013c:	d1f9      	bne.n	8000132 <delay+0x10>
		i--;
	}
}
 800013e:	bd07      	pop	{r0, r1, r2, pc}

08000140 <main>:


/* Main routine */
int main(void)
{
 8000140:	b508      	push	{r3, lr}
	/* Hardware initialization */
	RCC_Configuration();
 8000142:	f7ff ffe7 	bl	8000114 <RCC_Configuration>
	GPIO_Configuration();
 8000146:	f7ff ffd5 	bl	80000f4 <GPIO_Configuration>

	LED2_ON;
 800014a:	2180      	movs	r1, #128	; 0x80
 800014c:	480b      	ldr	r0, [pc, #44]	; (800017c <main+0x3c>)
 800014e:	0089      	lsls	r1, r1, #2
 8000150:	f000 f8ef 	bl	8000332 <GPIO_SetBits>


    while(1)
    {
    	LED1_ON;
 8000154:	2180      	movs	r1, #128	; 0x80
 8000156:	0049      	lsls	r1, r1, #1
 8000158:	4808      	ldr	r0, [pc, #32]	; (800017c <main+0x3c>)
 800015a:	f000 f8ea 	bl	8000332 <GPIO_SetBits>
    	delay(1000);
 800015e:	20fa      	movs	r0, #250	; 0xfa
 8000160:	0080      	lsls	r0, r0, #2
 8000162:	f7ff ffde 	bl	8000122 <delay>
    	LED1_OFF;
 8000166:	2180      	movs	r1, #128	; 0x80
 8000168:	4804      	ldr	r0, [pc, #16]	; (800017c <main+0x3c>)
 800016a:	0049      	lsls	r1, r1, #1
 800016c:	f000 f8e3 	bl	8000336 <GPIO_ResetBits>
    	delay(1000);
 8000170:	20fa      	movs	r0, #250	; 0xfa
 8000172:	0080      	lsls	r0, r0, #2
 8000174:	f7ff ffd5 	bl	8000122 <delay>
 8000178:	e7ec      	b.n	8000154 <main+0x14>
 800017a:	46c0      	nop			; (mov r8, r8)
 800017c:	48000800 	.word	0x48000800

08000180 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000180:	b507      	push	{r0, r1, r2, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000182:	4b34      	ldr	r3, [pc, #208]	; (8000254 <SystemInit+0xd4>)
 8000184:	2201      	movs	r2, #1
 8000186:	6819      	ldr	r1, [r3, #0]
 8000188:	4311      	orrs	r1, r2
 800018a:	6019      	str	r1, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 800018c:	6858      	ldr	r0, [r3, #4]
 800018e:	4932      	ldr	r1, [pc, #200]	; (8000258 <SystemInit+0xd8>)
 8000190:	4001      	ands	r1, r0
 8000192:	6059      	str	r1, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000194:	6818      	ldr	r0, [r3, #0]
 8000196:	4931      	ldr	r1, [pc, #196]	; (800025c <SystemInit+0xdc>)
 8000198:	4001      	ands	r1, r0
 800019a:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800019c:	6818      	ldr	r0, [r3, #0]
 800019e:	4930      	ldr	r1, [pc, #192]	; (8000260 <SystemInit+0xe0>)
 80001a0:	4001      	ands	r1, r0
 80001a2:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80001a4:	6858      	ldr	r0, [r3, #4]
 80001a6:	492f      	ldr	r1, [pc, #188]	; (8000264 <SystemInit+0xe4>)
 80001a8:	4001      	ands	r1, r0
 80001aa:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80001ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80001ae:	200f      	movs	r0, #15
 80001b0:	4381      	bics	r1, r0
 80001b2:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 80001b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80001b6:	492c      	ldr	r1, [pc, #176]	; (8000268 <SystemInit+0xe8>)
 80001b8:	4001      	ands	r1, r0
 80001ba:	6319      	str	r1, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80001bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80001be:	4391      	bics	r1, r2

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80001c0:	2200      	movs	r2, #0

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80001c2:	6359      	str	r1, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80001c4:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80001c6:	9201      	str	r2, [sp, #4]
 80001c8:	9200      	str	r2, [sp, #0]
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80001ca:	6819      	ldr	r1, [r3, #0]
 80001cc:	3280      	adds	r2, #128	; 0x80
 80001ce:	0252      	lsls	r2, r2, #9
 80001d0:	430a      	orrs	r2, r1
 80001d2:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80001d4:	6819      	ldr	r1, [r3, #0]
 80001d6:	2280      	movs	r2, #128	; 0x80
 80001d8:	0292      	lsls	r2, r2, #10
 80001da:	4011      	ands	r1, r2
 80001dc:	9100      	str	r1, [sp, #0]
    StartUpCounter++;  
 80001de:	9901      	ldr	r1, [sp, #4]
 80001e0:	3101      	adds	r1, #1
 80001e2:	9101      	str	r1, [sp, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80001e4:	9900      	ldr	r1, [sp, #0]
 80001e6:	2900      	cmp	r1, #0
 80001e8:	d104      	bne.n	80001f4 <SystemInit+0x74>
 80001ea:	31a0      	adds	r1, #160	; 0xa0
 80001ec:	9801      	ldr	r0, [sp, #4]
 80001ee:	01c9      	lsls	r1, r1, #7
 80001f0:	4288      	cmp	r0, r1
 80001f2:	d1ef      	bne.n	80001d4 <SystemInit+0x54>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001f4:	6819      	ldr	r1, [r3, #0]
 80001f6:	400a      	ands	r2, r1
 80001f8:	d000      	beq.n	80001fc <SystemInit+0x7c>
  {
    HSEStatus = (uint32_t)0x01;
 80001fa:	2201      	movs	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80001fc:	9200      	str	r2, [sp, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80001fe:	9a00      	ldr	r2, [sp, #0]
 8000200:	2a01      	cmp	r2, #1
 8000202:	d125      	bne.n	8000250 <SystemInit+0xd0>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8000204:	4a19      	ldr	r2, [pc, #100]	; (800026c <SystemInit+0xec>)
 8000206:	2111      	movs	r1, #17
 8000208:	6011      	str	r1, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800020a:	685a      	ldr	r2, [r3, #4]
 800020c:	605a      	str	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 800020e:	685a      	ldr	r2, [r3, #4]
 8000210:	605a      	str	r2, [r3, #4]

    /* PLL configuration = HSE * 6 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000212:	6859      	ldr	r1, [r3, #4]
 8000214:	4a16      	ldr	r2, [pc, #88]	; (8000270 <SystemInit+0xf0>)
 8000216:	400a      	ands	r2, r1
 8000218:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
 800021a:	6859      	ldr	r1, [r3, #4]
 800021c:	2288      	movs	r2, #136	; 0x88
 800021e:	0352      	lsls	r2, r2, #13
 8000220:	430a      	orrs	r2, r1
 8000222:	605a      	str	r2, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000224:	6819      	ldr	r1, [r3, #0]
 8000226:	2280      	movs	r2, #128	; 0x80
 8000228:	0452      	lsls	r2, r2, #17
 800022a:	430a      	orrs	r2, r1
 800022c:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800022e:	6819      	ldr	r1, [r3, #0]
 8000230:	4a08      	ldr	r2, [pc, #32]	; (8000254 <SystemInit+0xd4>)
 8000232:	0188      	lsls	r0, r1, #6
 8000234:	d5fb      	bpl.n	800022e <SystemInit+0xae>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000236:	6851      	ldr	r1, [r2, #4]
 8000238:	2003      	movs	r0, #3
 800023a:	4381      	bics	r1, r0
 800023c:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800023e:	6851      	ldr	r1, [r2, #4]
 8000240:	3801      	subs	r0, #1
 8000242:	4301      	orrs	r1, r0
 8000244:	6051      	str	r1, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000246:	6859      	ldr	r1, [r3, #4]
 8000248:	220c      	movs	r2, #12
 800024a:	400a      	ands	r2, r1
 800024c:	2a08      	cmp	r2, #8
 800024e:	d1fa      	bne.n	8000246 <SystemInit+0xc6>
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
}
 8000250:	bd07      	pop	{r0, r1, r2, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	40021000 	.word	0x40021000
 8000258:	f8ffb80c 	.word	0xf8ffb80c
 800025c:	fef6ffff 	.word	0xfef6ffff
 8000260:	fffbffff 	.word	0xfffbffff
 8000264:	ffc0ffff 	.word	0xffc0ffff
 8000268:	fffffeac 	.word	0xfffffeac
 800026c:	40022000 	.word	0x40022000
 8000270:	ffc07fff 	.word	0xffc07fff

08000274 <default_handler>:

#include <stm32f0xx.h>

extern void _estack(void);  // to force type checking
void Reset_Handler(void);
void default_handler (void) { while(1); }
 8000274:	b500      	push	{lr}
 8000276:	e7fe      	b.n	8000276 <default_handler+0x2>

08000278 <__libc_init_array>:

void __attribute__ ((weak)) __libc_init_array(void){}
 8000278:	4770      	bx	lr
 800027a:	0000      	movs	r0, r0

0800027c <Reset_Handler>:
extern unsigned long _sbss;
extern unsigned long _ebss;

extern int main(void);

void Reset_Handler(void) {
 800027c:	b508      	push	{r3, lr}
   src = &_sidata;
   dst = &_sdata;

   // Copy data initializers

    while (dst < &_edata)
 800027e:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <Reset_Handler+0x30>)
void Reset_Handler(void) {

   unsigned long *src, *dst;

   src = &_sidata;
   dst = &_sdata;
 8000280:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <Reset_Handler+0x34>)

   // Copy data initializers

    while (dst < &_edata)
 8000282:	e001      	b.n	8000288 <Reset_Handler+0xc>
      *(dst++) = *(src++);
 8000284:	ca02      	ldmia	r2!, {r1}
 8000286:	c302      	stmia	r3!, {r1}
   src = &_sidata;
   dst = &_sdata;

   // Copy data initializers

    while (dst < &_edata)
 8000288:	490a      	ldr	r1, [pc, #40]	; (80002b4 <Reset_Handler+0x38>)
 800028a:	428b      	cmp	r3, r1
 800028c:	d3fa      	bcc.n	8000284 <Reset_Handler+0x8>
 800028e:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <Reset_Handler+0x3c>)
 8000290:	e001      	b.n	8000296 <Reset_Handler+0x1a>

   // Zero bss

   dst = &_sbss;
   while (dst < &_ebss)
       *(dst++) = 0;
 8000292:	2200      	movs	r2, #0
 8000294:	c304      	stmia	r3!, {r2}
      *(dst++) = *(src++);

   // Zero bss

   dst = &_sbss;
   while (dst < &_ebss)
 8000296:	4a09      	ldr	r2, [pc, #36]	; (80002bc <Reset_Handler+0x40>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d3fa      	bcc.n	8000292 <Reset_Handler+0x16>
       *(dst++) = 0;

  SystemInit();
 800029c:	f7ff ff70 	bl	8000180 <SystemInit>
  __libc_init_array();
 80002a0:	f7ff ffea 	bl	8000278 <__libc_init_array>
  main();
 80002a4:	f7ff ff4c 	bl	8000140 <main>
 80002a8:	e7fe      	b.n	80002a8 <Reset_Handler+0x2c>
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	08000378 	.word	0x08000378
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000000 	.word	0x20000000
 80002b8:	20000000 	.word	0x20000000
 80002bc:	20000004 	.word	0x20000004

080002c0 <GPIO_Init>:
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002c2:	680b      	ldr	r3, [r1, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2300      	movs	r3, #0
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002c8:	1c1a      	adds	r2, r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002ca:	2501      	movs	r5, #1

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002cc:	9c01      	ldr	r4, [sp, #4]

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002ce:	4095      	lsls	r5, r2

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002d0:	402c      	ands	r4, r5

    if (currentpin == pos)
 80002d2:	42ac      	cmp	r4, r5
 80002d4:	d128      	bne.n	8000328 <GPIO_Init+0x68>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002d6:	790d      	ldrb	r5, [r1, #4]
 80002d8:	1e6f      	subs	r7, r5, #1
 80002da:	2f01      	cmp	r7, #1
 80002dc:	d812      	bhi.n	8000304 <GPIO_Init+0x44>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002de:	6887      	ldr	r7, [r0, #8]
 80002e0:	2603      	movs	r6, #3
 80002e2:	409e      	lsls	r6, r3
 80002e4:	43b7      	bics	r7, r6
 80002e6:	6087      	str	r7, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002e8:	794e      	ldrb	r6, [r1, #5]
 80002ea:	6887      	ldr	r7, [r0, #8]
 80002ec:	409e      	lsls	r6, r3
 80002ee:	4337      	orrs	r7, r6
 80002f0:	6087      	str	r7, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80002f2:	8887      	ldrh	r7, [r0, #4]
 80002f4:	43a7      	bics	r7, r4
 80002f6:	8087      	strh	r7, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002f8:	798c      	ldrb	r4, [r1, #6]
 80002fa:	8887      	ldrh	r7, [r0, #4]
 80002fc:	4094      	lsls	r4, r2
 80002fe:	433c      	orrs	r4, r7
 8000300:	b2a4      	uxth	r4, r4
 8000302:	8084      	strh	r4, [r0, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000304:	2403      	movs	r4, #3
 8000306:	6807      	ldr	r7, [r0, #0]
 8000308:	409c      	lsls	r4, r3
 800030a:	43e4      	mvns	r4, r4
 800030c:	4027      	ands	r7, r4
 800030e:	6007      	str	r7, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000310:	6807      	ldr	r7, [r0, #0]
 8000312:	409d      	lsls	r5, r3
 8000314:	433d      	orrs	r5, r7
 8000316:	6005      	str	r5, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000318:	68c5      	ldr	r5, [r0, #12]
 800031a:	402c      	ands	r4, r5
 800031c:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800031e:	79cc      	ldrb	r4, [r1, #7]
 8000320:	68c5      	ldr	r5, [r0, #12]
 8000322:	409c      	lsls	r4, r3
 8000324:	432c      	orrs	r4, r5
 8000326:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000328:	3201      	adds	r2, #1
 800032a:	3302      	adds	r3, #2
 800032c:	2a10      	cmp	r2, #16
 800032e:	d1cc      	bne.n	80002ca <GPIO_Init+0xa>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000330:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08000332 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8000332:	6181      	str	r1, [r0, #24]
}
 8000334:	4770      	bx	lr

08000336 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8000336:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8000338:	4770      	bx	lr
 800033a:	0000      	movs	r0, r0

0800033c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800033c:	b500      	push	{lr}
 800033e:	4b05      	ldr	r3, [pc, #20]	; (8000354 <RCC_APB2PeriphClockCmd+0x18>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000340:	2900      	cmp	r1, #0
 8000342:	d003      	beq.n	800034c <RCC_APB2PeriphClockCmd+0x10>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000344:	699a      	ldr	r2, [r3, #24]
 8000346:	4310      	orrs	r0, r2
 8000348:	6198      	str	r0, [r3, #24]
 800034a:	e002      	b.n	8000352 <RCC_APB2PeriphClockCmd+0x16>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800034c:	699a      	ldr	r2, [r3, #24]
 800034e:	4382      	bics	r2, r0
 8000350:	619a      	str	r2, [r3, #24]
  }
}
 8000352:	bd00      	pop	{pc}
 8000354:	40021000 	.word	0x40021000

08000358 <_init>:
 8000358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035e:	bc08      	pop	{r3}
 8000360:	469e      	mov	lr, r3
 8000362:	4770      	bx	lr

08000364 <_fini>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr
